/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Utils4Dev
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  AddCodeReactionDto,
  CodeDto,
  CodeWithReactionsDto,
  CommentDto,
  CreateCodeDto,
  CreateCommentDto,
  FindAllPublicCodesParams,
  FindMyCodesParams,
  GetBookmarkCodesParams,
  UpdateCodeDto
} from '.././models';

import { instance } from '.././http-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const createCode = (
    createCodeDto: CreateCodeDto,
 options?: SecondParameter<typeof instance>,signal?: AbortSignal
) => {
      
      
      return instance<CodeDto>(
      {url: `/codes`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCodeDto, signal
    },
      options);
    }
  


export const getCreateCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCode>>, TError,{data: CreateCodeDto}, TContext>, request?: SecondParameter<typeof instance>}
): UseMutationOptions<Awaited<ReturnType<typeof createCode>>, TError,{data: CreateCodeDto}, TContext> => {
    
const mutationKey = ['createCode'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCode>>, {data: CreateCodeDto}> = (props) => {
          const {data} = props ?? {};

          return  createCode(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateCodeMutationResult = NonNullable<Awaited<ReturnType<typeof createCode>>>
    export type CreateCodeMutationBody = CreateCodeDto
    export type CreateCodeMutationError = unknown

    export const useCreateCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createCode>>, TError,{data: CreateCodeDto}, TContext>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createCode>>,
        TError,
        {data: CreateCodeDto},
        TContext
      > => {

      const mutationOptions = getCreateCodeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const findAllPublicCodes = (
    params?: FindAllPublicCodesParams,
 options?: SecondParameter<typeof instance>,signal?: AbortSignal
) => {
      
      
      return instance<CodeWithReactionsDto[]>(
      {url: `/codes`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getFindAllPublicCodesQueryKey = (params?: FindAllPublicCodesParams,) => {
    return [`/codes`, ...(params ? [params]: [])] as const;
    }

    
export const getFindAllPublicCodesQueryOptions = <TData = Awaited<ReturnType<typeof findAllPublicCodes>>, TError = unknown>(params?: FindAllPublicCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPublicCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllPublicCodesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllPublicCodes>>> = ({ signal }) => findAllPublicCodes(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findAllPublicCodes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllPublicCodesQueryResult = NonNullable<Awaited<ReturnType<typeof findAllPublicCodes>>>
export type FindAllPublicCodesQueryError = unknown


export function useFindAllPublicCodes<TData = Awaited<ReturnType<typeof findAllPublicCodes>>, TError = unknown>(
 params: undefined |  FindAllPublicCodesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPublicCodes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllPublicCodes>>,
          TError,
          Awaited<ReturnType<typeof findAllPublicCodes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllPublicCodes<TData = Awaited<ReturnType<typeof findAllPublicCodes>>, TError = unknown>(
 params?: FindAllPublicCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPublicCodes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findAllPublicCodes>>,
          TError,
          Awaited<ReturnType<typeof findAllPublicCodes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllPublicCodes<TData = Awaited<ReturnType<typeof findAllPublicCodes>>, TError = unknown>(
 params?: FindAllPublicCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPublicCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllPublicCodes<TData = Awaited<ReturnType<typeof findAllPublicCodes>>, TError = unknown>(
 params?: FindAllPublicCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findAllPublicCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllPublicCodesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindAllPublicCodesSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof findAllPublicCodes>>, TError = unknown>(params?: FindAllPublicCodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findAllPublicCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindAllPublicCodesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findAllPublicCodes>>> = ({ signal }) => findAllPublicCodes(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof findAllPublicCodes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindAllPublicCodesSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof findAllPublicCodes>>>
export type FindAllPublicCodesSuspenseQueryError = unknown


export function useFindAllPublicCodesSuspense<TData = Awaited<ReturnType<typeof findAllPublicCodes>>, TError = unknown>(
 params: undefined |  FindAllPublicCodesParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findAllPublicCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllPublicCodesSuspense<TData = Awaited<ReturnType<typeof findAllPublicCodes>>, TError = unknown>(
 params?: FindAllPublicCodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findAllPublicCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindAllPublicCodesSuspense<TData = Awaited<ReturnType<typeof findAllPublicCodes>>, TError = unknown>(
 params?: FindAllPublicCodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findAllPublicCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindAllPublicCodesSuspense<TData = Awaited<ReturnType<typeof findAllPublicCodes>>, TError = unknown>(
 params?: FindAllPublicCodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findAllPublicCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindAllPublicCodesSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const findMyCodes = (
    params?: FindMyCodesParams,
 options?: SecondParameter<typeof instance>,signal?: AbortSignal
) => {
      
      
      return instance<CodeWithReactionsDto[]>(
      {url: `/codes/my-codes`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getFindMyCodesQueryKey = (params?: FindMyCodesParams,) => {
    return [`/codes/my-codes`, ...(params ? [params]: [])] as const;
    }

    
export const getFindMyCodesQueryOptions = <TData = Awaited<ReturnType<typeof findMyCodes>>, TError = unknown>(params?: FindMyCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findMyCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindMyCodesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findMyCodes>>> = ({ signal }) => findMyCodes(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findMyCodes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindMyCodesQueryResult = NonNullable<Awaited<ReturnType<typeof findMyCodes>>>
export type FindMyCodesQueryError = unknown


export function useFindMyCodes<TData = Awaited<ReturnType<typeof findMyCodes>>, TError = unknown>(
 params: undefined |  FindMyCodesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findMyCodes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findMyCodes>>,
          TError,
          Awaited<ReturnType<typeof findMyCodes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindMyCodes<TData = Awaited<ReturnType<typeof findMyCodes>>, TError = unknown>(
 params?: FindMyCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findMyCodes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findMyCodes>>,
          TError,
          Awaited<ReturnType<typeof findMyCodes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindMyCodes<TData = Awaited<ReturnType<typeof findMyCodes>>, TError = unknown>(
 params?: FindMyCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findMyCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindMyCodes<TData = Awaited<ReturnType<typeof findMyCodes>>, TError = unknown>(
 params?: FindMyCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findMyCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindMyCodesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindMyCodesSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof findMyCodes>>, TError = unknown>(params?: FindMyCodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findMyCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindMyCodesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findMyCodes>>> = ({ signal }) => findMyCodes(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof findMyCodes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindMyCodesSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof findMyCodes>>>
export type FindMyCodesSuspenseQueryError = unknown


export function useFindMyCodesSuspense<TData = Awaited<ReturnType<typeof findMyCodes>>, TError = unknown>(
 params: undefined |  FindMyCodesParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findMyCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindMyCodesSuspense<TData = Awaited<ReturnType<typeof findMyCodes>>, TError = unknown>(
 params?: FindMyCodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findMyCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindMyCodesSuspense<TData = Awaited<ReturnType<typeof findMyCodes>>, TError = unknown>(
 params?: FindMyCodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findMyCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindMyCodesSuspense<TData = Awaited<ReturnType<typeof findMyCodes>>, TError = unknown>(
 params?: FindMyCodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findMyCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindMyCodesSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const findCodeById = (
    id: string,
 options?: SecondParameter<typeof instance>,signal?: AbortSignal
) => {
      
      
      return instance<CodeWithReactionsDto>(
      {url: `/codes/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getFindCodeByIdQueryKey = (id: string,) => {
    return [`/codes/${id}`] as const;
    }

    
export const getFindCodeByIdQueryOptions = <TData = Awaited<ReturnType<typeof findCodeById>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findCodeById>>, TError, TData>>, request?: SecondParameter<typeof instance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindCodeByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findCodeById>>> = ({ signal }) => findCodeById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findCodeById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindCodeByIdQueryResult = NonNullable<Awaited<ReturnType<typeof findCodeById>>>
export type FindCodeByIdQueryError = unknown


export function useFindCodeById<TData = Awaited<ReturnType<typeof findCodeById>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findCodeById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findCodeById>>,
          TError,
          Awaited<ReturnType<typeof findCodeById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindCodeById<TData = Awaited<ReturnType<typeof findCodeById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findCodeById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findCodeById>>,
          TError,
          Awaited<ReturnType<typeof findCodeById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindCodeById<TData = Awaited<ReturnType<typeof findCodeById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findCodeById>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindCodeById<TData = Awaited<ReturnType<typeof findCodeById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findCodeById>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindCodeByIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindCodeByIdSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof findCodeById>>, TError = unknown>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findCodeById>>, TError, TData>>, request?: SecondParameter<typeof instance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindCodeByIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findCodeById>>> = ({ signal }) => findCodeById(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof findCodeById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindCodeByIdSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof findCodeById>>>
export type FindCodeByIdSuspenseQueryError = unknown


export function useFindCodeByIdSuspense<TData = Awaited<ReturnType<typeof findCodeById>>, TError = unknown>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findCodeById>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindCodeByIdSuspense<TData = Awaited<ReturnType<typeof findCodeById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findCodeById>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindCodeByIdSuspense<TData = Awaited<ReturnType<typeof findCodeById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findCodeById>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useFindCodeByIdSuspense<TData = Awaited<ReturnType<typeof findCodeById>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findCodeById>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindCodeByIdSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const updateCodeById = (
    id: string,
    updateCodeDto: UpdateCodeDto,
 options?: SecondParameter<typeof instance>,) => {
      
      
      return instance<CodeDto>(
      {url: `/codes/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateCodeDto
    },
      options);
    }
  


export const getUpdateCodeByIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCodeById>>, TError,{id: string;data: UpdateCodeDto}, TContext>, request?: SecondParameter<typeof instance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateCodeById>>, TError,{id: string;data: UpdateCodeDto}, TContext> => {
    
const mutationKey = ['updateCodeById'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCodeById>>, {id: string;data: UpdateCodeDto}> = (props) => {
          const {id,data} = props ?? {};

          return  updateCodeById(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCodeByIdMutationResult = NonNullable<Awaited<ReturnType<typeof updateCodeById>>>
    export type UpdateCodeByIdMutationBody = UpdateCodeDto
    export type UpdateCodeByIdMutationError = unknown

    export const useUpdateCodeById = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCodeById>>, TError,{id: string;data: UpdateCodeDto}, TContext>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCodeById>>,
        TError,
        {id: string;data: UpdateCodeDto},
        TContext
      > => {

      const mutationOptions = getUpdateCodeByIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const deleteCodeById = (
    id: string,
 options?: SecondParameter<typeof instance>,) => {
      
      
      return instance<void>(
      {url: `/codes/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteCodeByIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCodeById>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof instance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCodeById>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['deleteCodeById'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCodeById>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteCodeById(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCodeByIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCodeById>>>
    
    export type DeleteCodeByIdMutationError = unknown

    export const useDeleteCodeById = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCodeById>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteCodeById>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteCodeByIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const addReactionToCodeById = (
    id: string,
    addCodeReactionDto: AddCodeReactionDto,
 options?: SecondParameter<typeof instance>,signal?: AbortSignal
) => {
      
      
      return instance<void>(
      {url: `/codes/${id}/reaction`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: addCodeReactionDto, signal
    },
      options);
    }
  


export const getAddReactionToCodeByIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addReactionToCodeById>>, TError,{id: string;data: AddCodeReactionDto}, TContext>, request?: SecondParameter<typeof instance>}
): UseMutationOptions<Awaited<ReturnType<typeof addReactionToCodeById>>, TError,{id: string;data: AddCodeReactionDto}, TContext> => {
    
const mutationKey = ['addReactionToCodeById'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addReactionToCodeById>>, {id: string;data: AddCodeReactionDto}> = (props) => {
          const {id,data} = props ?? {};

          return  addReactionToCodeById(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddReactionToCodeByIdMutationResult = NonNullable<Awaited<ReturnType<typeof addReactionToCodeById>>>
    export type AddReactionToCodeByIdMutationBody = AddCodeReactionDto
    export type AddReactionToCodeByIdMutationError = unknown

    export const useAddReactionToCodeById = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addReactionToCodeById>>, TError,{id: string;data: AddCodeReactionDto}, TContext>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addReactionToCodeById>>,
        TError,
        {id: string;data: AddCodeReactionDto},
        TContext
      > => {

      const mutationOptions = getAddReactionToCodeByIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const removeReactionToCodeById = (
    id: string,
 options?: SecondParameter<typeof instance>,) => {
      
      
      return instance<void>(
      {url: `/codes/${id}/reaction`, method: 'DELETE'
    },
      options);
    }
  


export const getRemoveReactionToCodeByIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeReactionToCodeById>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof instance>}
): UseMutationOptions<Awaited<ReturnType<typeof removeReactionToCodeById>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['removeReactionToCodeById'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeReactionToCodeById>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  removeReactionToCodeById(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveReactionToCodeByIdMutationResult = NonNullable<Awaited<ReturnType<typeof removeReactionToCodeById>>>
    
    export type RemoveReactionToCodeByIdMutationError = unknown

    export const useRemoveReactionToCodeById = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeReactionToCodeById>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof removeReactionToCodeById>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getRemoveReactionToCodeByIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const addCommentToCode = (
    id: string,
    createCommentDto: CreateCommentDto,
 options?: SecondParameter<typeof instance>,signal?: AbortSignal
) => {
      
      
      return instance<CommentDto>(
      {url: `/codes/${id}/comments`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCommentDto, signal
    },
      options);
    }
  


export const getAddCommentToCodeMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addCommentToCode>>, TError,{id: string;data: CreateCommentDto}, TContext>, request?: SecondParameter<typeof instance>}
): UseMutationOptions<Awaited<ReturnType<typeof addCommentToCode>>, TError,{id: string;data: CreateCommentDto}, TContext> => {
    
const mutationKey = ['addCommentToCode'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addCommentToCode>>, {id: string;data: CreateCommentDto}> = (props) => {
          const {id,data} = props ?? {};

          return  addCommentToCode(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddCommentToCodeMutationResult = NonNullable<Awaited<ReturnType<typeof addCommentToCode>>>
    export type AddCommentToCodeMutationBody = CreateCommentDto
    export type AddCommentToCodeMutationError = unknown

    export const useAddCommentToCode = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addCommentToCode>>, TError,{id: string;data: CreateCommentDto}, TContext>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addCommentToCode>>,
        TError,
        {id: string;data: CreateCommentDto},
        TContext
      > => {

      const mutationOptions = getAddCommentToCodeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const commentsByCodeId = (
    id: string,
 options?: SecondParameter<typeof instance>,signal?: AbortSignal
) => {
      
      
      return instance<CommentDto[]>(
      {url: `/codes/${id}/comments`, method: 'GET', signal
    },
      options);
    }
  

export const getCommentsByCodeIdQueryKey = (id: string,) => {
    return [`/codes/${id}/comments`] as const;
    }

    
export const getCommentsByCodeIdQueryOptions = <TData = Awaited<ReturnType<typeof commentsByCodeId>>, TError = unknown>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof commentsByCodeId>>, TError, TData>>, request?: SecondParameter<typeof instance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCommentsByCodeIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof commentsByCodeId>>> = ({ signal }) => commentsByCodeId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof commentsByCodeId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CommentsByCodeIdQueryResult = NonNullable<Awaited<ReturnType<typeof commentsByCodeId>>>
export type CommentsByCodeIdQueryError = unknown


export function useCommentsByCodeId<TData = Awaited<ReturnType<typeof commentsByCodeId>>, TError = unknown>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof commentsByCodeId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof commentsByCodeId>>,
          TError,
          Awaited<ReturnType<typeof commentsByCodeId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCommentsByCodeId<TData = Awaited<ReturnType<typeof commentsByCodeId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof commentsByCodeId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof commentsByCodeId>>,
          TError,
          Awaited<ReturnType<typeof commentsByCodeId>>
        > , 'initialData'
      >, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCommentsByCodeId<TData = Awaited<ReturnType<typeof commentsByCodeId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof commentsByCodeId>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCommentsByCodeId<TData = Awaited<ReturnType<typeof commentsByCodeId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof commentsByCodeId>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCommentsByCodeIdQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCommentsByCodeIdSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof commentsByCodeId>>, TError = unknown>(id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof commentsByCodeId>>, TError, TData>>, request?: SecondParameter<typeof instance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCommentsByCodeIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof commentsByCodeId>>> = ({ signal }) => commentsByCodeId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof commentsByCodeId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CommentsByCodeIdSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof commentsByCodeId>>>
export type CommentsByCodeIdSuspenseQueryError = unknown


export function useCommentsByCodeIdSuspense<TData = Awaited<ReturnType<typeof commentsByCodeId>>, TError = unknown>(
 id: string, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof commentsByCodeId>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCommentsByCodeIdSuspense<TData = Awaited<ReturnType<typeof commentsByCodeId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof commentsByCodeId>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCommentsByCodeIdSuspense<TData = Awaited<ReturnType<typeof commentsByCodeId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof commentsByCodeId>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useCommentsByCodeIdSuspense<TData = Awaited<ReturnType<typeof commentsByCodeId>>, TError = unknown>(
 id: string, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof commentsByCodeId>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCommentsByCodeIdSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const addBookmarkByCodeId = (
    id: string,
 options?: SecondParameter<typeof instance>,signal?: AbortSignal
) => {
      
      
      return instance<void>(
      {url: `/codes/${id}/bookmark`, method: 'POST', signal
    },
      options);
    }
  


export const getAddBookmarkByCodeIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addBookmarkByCodeId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof instance>}
): UseMutationOptions<Awaited<ReturnType<typeof addBookmarkByCodeId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['addBookmarkByCodeId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addBookmarkByCodeId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  addBookmarkByCodeId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddBookmarkByCodeIdMutationResult = NonNullable<Awaited<ReturnType<typeof addBookmarkByCodeId>>>
    
    export type AddBookmarkByCodeIdMutationError = unknown

    export const useAddBookmarkByCodeId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addBookmarkByCodeId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addBookmarkByCodeId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getAddBookmarkByCodeIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const removeBookmarkByCodeId = (
    id: string,
 options?: SecondParameter<typeof instance>,) => {
      
      
      return instance<void>(
      {url: `/codes/${id}/bookmark`, method: 'DELETE'
    },
      options);
    }
  


export const getRemoveBookmarkByCodeIdMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeBookmarkByCodeId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof instance>}
): UseMutationOptions<Awaited<ReturnType<typeof removeBookmarkByCodeId>>, TError,{id: string}, TContext> => {
    
const mutationKey = ['removeBookmarkByCodeId'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeBookmarkByCodeId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  removeBookmarkByCodeId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveBookmarkByCodeIdMutationResult = NonNullable<Awaited<ReturnType<typeof removeBookmarkByCodeId>>>
    
    export type RemoveBookmarkByCodeIdMutationError = unknown

    export const useRemoveBookmarkByCodeId = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeBookmarkByCodeId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof removeBookmarkByCodeId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getRemoveBookmarkByCodeIdMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    export const getBookmarkCodes = (
    params?: GetBookmarkCodesParams,
 options?: SecondParameter<typeof instance>,signal?: AbortSignal
) => {
      
      
      return instance<CodeWithReactionsDto[]>(
      {url: `/codes/me/bookmarks`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetBookmarkCodesQueryKey = (params?: GetBookmarkCodesParams,) => {
    return [`/codes/me/bookmarks`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBookmarkCodesQueryOptions = <TData = Awaited<ReturnType<typeof getBookmarkCodes>>, TError = unknown>(params?: GetBookmarkCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBookmarkCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBookmarkCodesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBookmarkCodes>>> = ({ signal }) => getBookmarkCodes(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBookmarkCodes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBookmarkCodesQueryResult = NonNullable<Awaited<ReturnType<typeof getBookmarkCodes>>>
export type GetBookmarkCodesQueryError = unknown


export function useGetBookmarkCodes<TData = Awaited<ReturnType<typeof getBookmarkCodes>>, TError = unknown>(
 params: undefined |  GetBookmarkCodesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBookmarkCodes>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBookmarkCodes>>,
          TError,
          Awaited<ReturnType<typeof getBookmarkCodes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBookmarkCodes<TData = Awaited<ReturnType<typeof getBookmarkCodes>>, TError = unknown>(
 params?: GetBookmarkCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBookmarkCodes>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBookmarkCodes>>,
          TError,
          Awaited<ReturnType<typeof getBookmarkCodes>>
        > , 'initialData'
      >, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBookmarkCodes<TData = Awaited<ReturnType<typeof getBookmarkCodes>>, TError = unknown>(
 params?: GetBookmarkCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBookmarkCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBookmarkCodes<TData = Awaited<ReturnType<typeof getBookmarkCodes>>, TError = unknown>(
 params?: GetBookmarkCodesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBookmarkCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBookmarkCodesQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetBookmarkCodesSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getBookmarkCodes>>, TError = unknown>(params?: GetBookmarkCodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getBookmarkCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBookmarkCodesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBookmarkCodes>>> = ({ signal }) => getBookmarkCodes(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getBookmarkCodes>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBookmarkCodesSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getBookmarkCodes>>>
export type GetBookmarkCodesSuspenseQueryError = unknown


export function useGetBookmarkCodesSuspense<TData = Awaited<ReturnType<typeof getBookmarkCodes>>, TError = unknown>(
 params: undefined |  GetBookmarkCodesParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getBookmarkCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBookmarkCodesSuspense<TData = Awaited<ReturnType<typeof getBookmarkCodes>>, TError = unknown>(
 params?: GetBookmarkCodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getBookmarkCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBookmarkCodesSuspense<TData = Awaited<ReturnType<typeof getBookmarkCodes>>, TError = unknown>(
 params?: GetBookmarkCodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getBookmarkCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetBookmarkCodesSuspense<TData = Awaited<ReturnType<typeof getBookmarkCodes>>, TError = unknown>(
 params?: GetBookmarkCodesParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getBookmarkCodes>>, TError, TData>>, request?: SecondParameter<typeof instance>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBookmarkCodesSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



